name: SQL Database Automation

on:
  workflow_dispatch:
    inputs:
      overwrite:
        description: 'Overwrite existing database?'
        required: false
        default: 'false'
  push:
    branches: [ main ]
    paths: [ '.github/workflows/sql-automation.yml', 'scripts/*.sql' ]

env:
  SQL_DRIVER: 'ODBC Driver 17 for SQL Server'

jobs:
  deploy-database:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyodbc
        echo "pyodbc" > requirements.txt
        
    - name: Run SQL automation
      env:
        SQL_SERVER: ${{ secrets.SQL_SERVER }}
        SQL_USERNAME: ${{ secrets.SQL_USERNAME }}
        SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
        OVERWRITE: ${{ github.event.inputs.overwrite || 'false' }}
      run: |
        python -c "
        import os
        import pyodbc
        
        # Parse inputs
        server_parts = os.getenv('SQL_SERVER').split(',')
        overwrite = os.getenv('OVERWRITE').lower() == 'true'
        
        # Connection string
        conn_str = f'DRIVER={{{os.getenv("SQL_DRIVER")}}};SERVER={server_parts[0]},{server_parts[1]};DATABASE=master;UID={os.getenv("SQL_USERNAME")};PWD={os.getenv("SQL_PASSWORD")}'
        
        try:
            print('üöÄ Starting database automation...')
            with pyodbc.connect(conn_str, autocommit=True) as conn:
                cursor = conn.cursor()
                
                # Read stored procedure script
                with open('scripts/sp_CreateAutoTestDB.sql', 'r') as f:
                    sql_script = f.read()
                
                # Execute creation script
                print('üìú Executing stored procedure creation...')
                cursor.execute(sql_script)
                
                # Execute the procedure
                print(f'‚öôÔ∏è Executing procedure (overwrite={overwrite})...')
                cursor.execute(f'EXEC sp_CreateAutoTestDB @OverwriteExisting={1 if overwrite else 0}')
                
                # Verification
                print('üîç Verifying results...')
                cursor.execute(\"\"\"
                    USE AutoTest;
                    SELECT 
                        DB_NAME() AS db,
                        (SELECT COUNT(*) FROM sys.tables WHERE name = 'user') AS table_exists,
                        (SELECT COUNT(*) FROM [user]) AS user_count
                \"\"\")
                result = cursor.fetchone()
                print(f'‚úÖ Verification: Database={result.db}, Table exists={result.table_exists}, Users={result.user_count}')
                
            print('üéâ Automation completed successfully!')
        except Exception as e:
            print(f'‚ùå Error: {str(e)}')
            exit(1)
        "
