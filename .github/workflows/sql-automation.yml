name: SQL Database Automation

on:
  workflow_dispatch:
    inputs:
      overwrite:
        description: 'Overwrite existing database?'
        required: false
        default: 'false'

env:
  SQL_DRIVER: 'ODBC Driver 17 for SQL Server'  # Defined here

jobs:
  deploy-database:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyodbc
        
    - name: Run SQL automation
      env:
        SQL_SERVER: ${{ secrets.SQL_SERVER }}
        SQL_USERNAME: ${{ secrets.SQL_USERNAME }}
        SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
        OVERWRITE: ${{ github.event.inputs.overwrite }}
      run: |
        python -c "
        import os
        import pyodbc
        
        # Get all environment variables
        server = os.getenv('SQL_SERVER').split(',')
        username = os.getenv('SQL_USERNAME')
        password = os.getenv('SQL_PASSWORD')
        driver = os.getenv('SQL_DRIVER')  # Now properly defined
        
        print(f'Using driver: {driver}')
        
        try:
            conn_str = f'DRIVER={{{driver}}};SERVER={server[0]},{server[1]};DATABASE=master;UID={username};PWD={password}'
            print(f'Connection string: {conn_str[:30]}...')  # Print partial for security
            
            with pyodbc.connect(conn_str, autocommit=True) as conn:
                cursor = conn.cursor()
                cursor.execute('EXEC sp_CreateAutoTestDB')
                print('Stored procedure executed successfully')
                
        except Exception as e:
            print(f'Error: {e}')
            exit(1)
        "
